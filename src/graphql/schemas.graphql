  
# Query -> GET
# Mutation -> POST, DELETE, PATCH, PUT

# Lists
# [String] -> list of strings
# [Int] -> list of ints
# Scalar Types (Types basic of GraphQL) -> String, Int, ID, Float, Boolean

type Query {
  hello: String! # ! -> es obligatorio
  getPerson(name: String, age: Int): String
  getInt(age: Int): Int
  getFloat(price: Float): Float
  getString: String
  getBoolean: Boolean
  getId: ID
  getNumbers(numbers: [Int!]!): [Int]
  # Product
  product(id: ID!): Product
  products: [Product!]!
  category(id: ID!): Category
}

type Mutation {
  login(email: EmailAddress!, password: String!): AuthResponse
  addProduct(dto: CreateProductInput!): Product!
  updateProduct(dto: UpdateProductInput!, idProduct: ID): Product
  deleteProduct(idProduct: ID!): ID
  addCategory(dto: CreateCategoryInput!): Category!
}

# types

type AuthResponse {
  access_token: String!
  user: User!
}

type User {
  id: ID!
  email: String!
  recoveryToken: String
  role: String!
  createdAt: String!
}

type Product {
  id: ID!,
  name: String!,
  price: Float!,
  description: String!,
  image: String!,
  created_at: String!
  categoryId: ID!
  category: Category!
}

type Category {
  id: ID!
  name: String!
  image: String!
  products: [Product!]!
}


# dtos -> lo que vamos a enviar a nuestro servicio data transfer objects
input CreateProductInput {
  name: String!
  price: Int!
  description: String!
  image: URL!
  categoryId: ID!
}

input CreateCategoryInput {
  name: CategoryNameType!
  image: URL!
}

input UpdateProductInput {
  name: String
  price: Int
  description: String
  image: String 
  categoryId: ID
}

scalar CategoryNameType